; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define Registered
#define SetupName "LiveMirrorNCall"
#define Config "Release"

#define MyAppName "LiveMirror"
#define MyAppPublisher "Spirale Technologies"
#define MyAppURL "http://www.copycat.fr"
#define MyAppExeName "LiveMirrorMgr.exe"
#define MyAppExePath "c:\git\livemirror\manager\Win32\"
#define MyAppVersion GetFileVersion(MyAppExePath + Config + "\LiveMirrorMgr.exe")

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{BBFC71D7-E12F-4206-9799-41C56BA604F1}
AppName={#MyAppName}
#IfDef Trial
AppVersion={#MyAppVersion} Evaluation
#else
AppVersion={#MyAppVersion}
#endif
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName=LiveMirror
OutputBaseFilename={#SetupName}_{#MyAppVersion}
Compression=lzma
SolidCompression=true
DisableDirPage=false
DisableProgramGroupPage=true

[Languages]
Name: english; MessagesFile: compiler:Default.isl
Name: french; MessagesFile: compiler:Languages\French.isl

[Files]
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

Source: ..\Manager\Win32\{#Config}\LiveMirrorMgr.exe; DestDir: {app}\Manager
Source: ..\Manager\Win32\{#Config}\LiveMirrorCpl.cpl; DestDir: {sys}
Source: ..\Manager\locale\FR\LC_MESSAGES\default.mo; DestDir: {app}\Manager\locale\FR\LC_MESSAGES
Source: ..\Manager\locale\FR\LC_MESSAGES\default.po; DestDir: {app}\Manager\locale\FR\LC_MESSAGES

Source: ..\Misc\Win32\{#Config}\LiveMirrorUninstaller.exe; DestDir: {app}\Misc
Source: ..\Misc\locale\FR\LC_MESSAGES\default.mo; DestDir: {app}\Misc\locale\FR\LC_MESSAGES
Source: ..\Misc\locale\FR\LC_MESSAGES\default.po; DestDir: {app}\Misc\locale\FR\LC_MESSAGES

Source: ..\Service\Win32\{#Config}\LiveMirrorSrv.exe; DestDir: {app}\Service
Source: ..\Service\locale\FR\LC_MESSAGES\default.mo; DestDir: {app}\Service\locale\FR\LC_MESSAGES
Source: ..\Service\locale\FR\LC_MESSAGES\default.po; DestDir: {app}\Service\locale\FR\LC_MESSAGES

; Common language file goes in each directory
Source: ..\common\locale\FR\LC_MESSAGES\common.po; DestDir: {app}\Manager\locale\FR\LC_MESSAGES
Source: ..\common\locale\FR\LC_MESSAGES\common.mo; DestDir: {app}\Manager\locale\FR\LC_MESSAGES
Source: ..\common\locale\FR\LC_MESSAGES\common.po; DestDir: {app}\Misc\locale\FR\LC_MESSAGES
Source: ..\common\locale\FR\LC_MESSAGES\common.mo; DestDir: {app}\Misc\locale\FR\LC_MESSAGES
Source: ..\erroroptions.ini; DestDir: {app}

[Icons]
Name: {group}\{#MyAppName}; Filename: {app}\Manager\{#MyAppExeName}

[Run]
Filename: {app}\Manager\{#MyAppExeName}; Description: {cm:RunLMMgr}; Flags: nowait postinstall skipifsilent
Filename: {app}\Service\LiveMirrorSrv.exe; Parameters: /INSTALL /SILENT; Check: not LMIsInstalled

[Dirs]
Name: {app}\Configs; Flags: uninsalwaysuninstall
Name: {app}\Configs\T1; Flags: uninsalwaysuninstall

[Registry]
Root: HKLM; Subkey: Software\Microtec\LiveMirror; ValueType: string; ValueName: InstallPath; ValueData: {app}; Flags: createvalueifdoesntexist uninsdeletekey
[UninstallRun]
Filename: sc; Parameters: stop LiveMirror; Flags: nowait
Filename: {app}\Service\LiveMirrorSrv.exe; Parameters: /UNINSTALL /SILENT
Filename: {app}\Misc\LiveMirrorUninstaller.exe

[CustomMessages]
english.RunLMMgr=Run LiveMirror Manager
french.RunLMMgr=Ouvrir l'Administrateur LiveMirror
[UninstallDelete]
Name: {app}\config.ini; Type: files; Languages: 
Name: {app}\Configs; Type: filesandordirs

[INI]
Filename: {app}\configs.ini; Section: T1; Key: ExcludedFields; String: USER_SESSIONS.LOGON,USER_SESSIONS.LOGOFF,USER_SESSIONS.USER_SESSION_ID,USER_SESSIONS.APP_VERSION,USER_SESSIONS.USER_ID
Filename: {app}\configs.ini; Section: T1; Key: SyncFrequency; String: 10
Filename: {app}\configs.ini; Section: T1; Key: TrackChanges; String: 0
Filename: {app}\configs.ini; Section: T1; Key: Licence; String: {code:GetLicence}
Filename: {app}\configs.ini; Section: T1; Key: MasterDBType; String: Interbase
Filename: {app}\configs.ini; Section: T1; Key: MirrorDBType; String: Interbase
Filename: {app}\Configs\T1\master.ini; Section: General; Key: DBVersion; String: FB1.5
Filename: {app}\Configs\T1\master.ini; Section: General; Key: DBName; String: {code:GetDBName|master}
Filename: {app}\Configs\T1\master.ini; Section: General; Key: Username; String: SYSDBA
Filename: {app}\Configs\T1\master.ini; Section: General; Key: Password; String: 10gbhoaw
Filename: {app}\Configs\T1\mirror.ini; Section: General; Key: DBVersion; String: FB1.5
Filename: {app}\Configs\T1\mirror.ini; Section: General; Key: DBName; String: {code:GetDBName|mirror}
Filename: {app}\Configs\T1\mirror.ini; Section: General; Key: Username; String: SYSDBA
Filename: {app}\Configs\T1\mirror.ini; Section: General; Key: Password; String: 10gbhoaw

[Code]
var
  ConfigPage: TInputQueryWizardPage;

function LMIsInstalled: Boolean;
begin
  Result := RegValueExists(HKEY_LOCAL_MACHINE,'Software\Microsoft\Windows\CurrentVersion\Uninstall\{{BBFC71D7-E12F-4206-9799-41C56BA604F1}_is1', 'UninstallString');
end;

procedure InitializeWizard;
begin
  { Create the pages }

  ConfigPage := CreateInputQueryPage(wpWelcome,
    'Configuration data', '',
    'Please specify the IP addresses of your production and backup database servers and your licence key, then click Next.');
  ConfigPage.Add('Production IP:', False);
  ConfigPage.Add('Backup IP:', False);
  ConfigPage.Add('Licence key:', False);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  { Validate certain pages before allowing the user to proceed }
  if CurPageID = ConfigPage.ID then begin
    if ConfigPage.Values[0] = '' then begin
      MsgBox('You must enter the IP address for your production DB server.', mbError, MB_OK);
      Result := False;
    end else if ConfigPage.Values[1] = '' then begin
      MsgBox('You must enter the IP address for your backup DB server.', mbError, MB_OK);
      Result := False;
    end else if ConfigPage.Values[2] = '' then begin
      MsgBox('You must enter your LiveMirror licence key.', mbError, MB_OK);
      Result := False;
    end else
      Result := True;
  end else
    Result := True;
end;


function GetDBName(Param: String): String;
begin
  if Param = 'master' then
    Result := ConfigPage.Values[0] + ':NCALL'
  else if Param = 'mirror' then
    Result := ConfigPage.Values[1] + ':NCALL';
end;

function GetLicence(Param: String): String;
begin
  Result := ConfigPage.Values[2];
end;
